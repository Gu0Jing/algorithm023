//判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。 
//
// 
// 数字 1-9 在每一行只能出现一次。 
// 数字 1-9 在每一列只能出现一次。 
// 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。 
// 
//
// 
//
// 上图是一个部分填充的有效的数独。 
//
// 数独部分空格内已填入了数字，空白格用 '.' 表示。 
//
// 示例 1: 
//
// 输入:
//[
//  ["5","3",".",".","7",".",".",".","."],
//  ["6",".",".","1","9","5",".",".","."],
//  [".","9","8",".",".",".",".","6","."],
//  ["8",".",".",".","6",".",".",".","3"],
//  ["4",".",".","8",".","3",".",".","1"],
//  ["7",".",".",".","2",".",".",".","6"],
//  [".","6",".",".",".",".","2","8","."],
//  [".",".",".","4","1","9",".",".","5"],
//  [".",".",".",".","8",".",".","7","9"]
//]
//输出: true
// 
//
// 示例 2: 
//
// 输入:
//[
//  ["8","3",".",".","7",".",".",".","."],
//  ["6",".",".","1","9","5",".",".","."],
//  [".","9","8",".",".",".",".","6","."],
//  ["8",".",".",".","6",".",".",".","3"],
//  ["4",".",".","8",".","3",".",".","1"],
//  ["7",".",".",".","2",".",".",".","6"],
//  [".","6",".",".",".",".","2","8","."],
//  [".",".",".","4","1","9",".",".","5"],
//  [".",".",".",".","8",".",".","7","9"]
//]
//输出: false
//解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
//     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。 
//
// 说明: 
//
// 
// 一个有效的数独（部分已被填充）不一定是可解的。 
// 只需要根据以上规则，验证已经填入的数字是否有效即可。 
// 给定数独序列只包含数字 1-9 和字符 '.' 。 
// 给定数独永远是 9x9 形式的。 
// 
// Related Topics 哈希表 
// 👍 471 👎 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public boolean isValidSudoku(char[][] board) {
        //思路：创建三个哈希数组，遍历格子存储并校验是否唯一
        //难点：每个格子和9个子数独(3x3)的映射关系
        //     index(i,j) = (i/3)*3 + j/3

        //由于填入的数字可以直接作为数组下标，哈希数组可以用普通数组代替
        int[][] row = new int[9][9];//存储第n行 数字m 出现的次数
        int[][] col = new int[9][9];//存储第n列 数字m 出现的次数
        int[][] box = new int[9][9];//存储在第n个子数独里 数字m 出现的次数

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j]!='.') {
                    int num = board[i][j] - '1';//数字1-9对应下标0-8
                    int boxIndex = (i / 3) * 3 + j / 3;
                    //校验行
                    if (row[i][num] == 1) {
                        return false;
                    } else {row[i][num] = 1;}
                    //校验列
                    if (col[j][num] == 1) {
                        return false;
                    } else {col[j][num] = 1;}
                    //校验子数独
                    if (box[boxIndex][num] == 1) {
                        return false;
                    } else {box[boxIndex][num] = 1;}
                }
            }
        }
        return true;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
